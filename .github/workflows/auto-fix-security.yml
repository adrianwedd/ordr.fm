name: Auto-Fix Security Issues

on:
  # Trigger when security issues are labeled
  issues:
    types: [labeled]
  
  # Manual trigger with issue number
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to fix'
        required: true
        type: number

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  auto-fix-rate-limiting:
    runs-on: ubuntu-latest
    if: |
      (github.event.label.name == 'codeql-alert' && contains(github.event.issue.title, 'Missing rate limiting')) ||
      (github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Create branch for fix
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        BRANCH_NAME="fix/security-rate-limiting-${{ github.event.issue.number || inputs.issue_number }}"
        git checkout -b $BRANCH_NAME
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        
    - name: Apply rate limiting fix
      run: |
        # Check if rate limiter is already installed
        if [ -f "visualization/package.json" ]; then
          cd visualization
          if ! grep -q "express-rate-limit" package.json; then
            npm install express-rate-limit
          fi
          cd ..
        fi
        
        if [ -f "server/package.json" ]; then
          cd server
          if ! grep -q "express-rate-limit" package.json; then
            npm install express-rate-limit
          fi
          cd ..
        fi
        
        # Apply rate limiting to visualization server
        if [ -f "visualization/server.js" ]; then
          # Check if rate limiting already exists
          if ! grep -q "express-rate-limit" visualization/server.js; then
            # Create the fixed file
            cat > /tmp/rate-limit-patch.js << 'EOF'
const rateLimit = require('express-rate-limit');

// Create rate limiter - 100 requests per 15 minutes per IP
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100, // Limit each IP to 100 requests per windowMs
    message: 'Too many requests from this IP, please try again later.',
    standardHeaders: true, // Return rate limit info in the RateLimit-* headers
    legacyHeaders: false, // Disable the X-RateLimit-* headers
});

// Stricter rate limit for export endpoint (10 per hour)
const exportLimiter = rateLimit({
    windowMs: 60 * 60 * 1000, // 1 hour
    max: 10,
    message: 'Export rate limit exceeded. Please try again later.',
});

EOF
            
            # Insert rate limiting after requires
            sed -i '/const app = express();/a\\n// Rate limiting middleware' visualization/server.js
            sed -i '/\/\/ Rate limiting middleware/r /tmp/rate-limit-patch.js' visualization/server.js
            
            # Apply rate limiting to routes
            sed -i '/app.use(express.json());/a\app.use('"'"'/api/'"'"', limiter);' visualization/server.js
            sed -i '/app.get('"'"'\/api\/export'"'"'/i\app.use('"'"'/api/export'"'"', exportLimiter);' visualization/server.js
          fi
        fi
        
        # Apply rate limiting to main server
        if [ -f "server/server.js" ]; then
          if ! grep -q "express-rate-limit" server/server.js; then
            # Apply similar fix to server/server.js
            echo "// TODO: Apply rate limiting to server/server.js"
          fi
        fi
        
    - name: Commit changes
      run: |
        git add -A
        git commit -m "fix: Add rate limiting to prevent DoS attacks

        - Install express-rate-limit package
        - Add general rate limiter (100 req/15min)
        - Add stricter limit for export endpoint (10/hour)
        - Implement security best practices

        Fixes #${{ github.event.issue.number || inputs.issue_number }}"
        
    - name: Push branch
      run: |
        git push origin ${{ env.BRANCH_NAME }}
        
    - name: Create Pull Request
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issueNumber = ${{ github.event.issue.number || inputs.issue_number }};
          
          const pr = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `fix: Add rate limiting for security issue #${issueNumber}`,
            body: `## ðŸ”’ Security Fix: Rate Limiting
            
            This PR automatically adds rate limiting to prevent denial of service attacks.
            
            ### Changes Made
            - âœ… Installed \`express-rate-limit\` package
            - âœ… Added general API rate limiting (100 requests per 15 minutes)
            - âœ… Added stricter rate limiting for export endpoint (10 per hour)
            - âœ… Configured proper headers and error messages
            
            ### Security Impact
            - Prevents denial of service attacks
            - Protects server resources
            - Ensures fair API usage
            - Maintains service availability
            
            ### Testing
            \`\`\`bash
            # Test rate limiting
            for i in {1..150}; do
              curl -s -o /dev/null -w "%{http_code}\n" http://localhost:3000/api/stats
            done
            # Should see 429 responses after 100 requests
            \`\`\`
            
            Fixes #${issueNumber}
            
            ---
            *This PR was automatically generated to fix a security vulnerability.*`,
            head: '${{ env.BRANCH_NAME }}',
            base: 'main',
            draft: false
          });
          
          // Link PR to issue
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: `ðŸ¤– **Automated Fix Created**\n\nI've created PR #${pr.data.number} to fix this security issue.\n\nPlease review and merge the changes.`
          });
          
          // Add labels to PR
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.data.number,
            labels: ['security', 'automated-fix']
          });

  auto-fix-permissions:
    runs-on: ubuntu-latest
    if: |
      (github.event.label.name == 'codeql-alert' && contains(github.event.issue.title, 'Workflow does not contain permissions')) ||
      (github.event_name == 'workflow_dispatch' && contains(github.event.issue.title, 'permissions'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create branch for fix
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        BRANCH_NAME="fix/workflow-permissions-${{ github.event.issue.number || inputs.issue_number }}"
        git checkout -b $BRANCH_NAME
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        
    - name: Fix workflow permissions
      run: |
        # Add permissions to workflows that don't have them
        for workflow in .github/workflows/*.yml; do
          if [ -f "$workflow" ]; then
            # Skip if already has top-level permissions
            if ! grep -q "^permissions:" "$workflow"; then
              # Add default read-only permissions after name and on sections
              awk '
                /^on:/ { on_section = 1 }
                /^[^ ]/ && on_section && !/^[ ]/ && !/^on:/ {
                  print "\n# Explicit permissions for security"
                  print "permissions:"
                  print "  contents: read"
                  print ""
                  on_section = 0
                }
                { print }
              ' "$workflow" > "${workflow}.tmp" && mv "${workflow}.tmp" "$workflow"
            fi
            
            # Also check for job-level permissions
            # This is more complex and would need parsing YAML properly
            # For now, we'll just ensure top-level permissions exist
          fi
        done
        
    - name: Commit changes
      run: |
        git add -A
        if git diff --staged --quiet; then
          echo "No changes needed"
          exit 0
        fi
        
        git commit -m "fix: Add explicit permissions to GitHub Actions workflows

        - Add explicit permissions declarations to all workflows
        - Follow principle of least privilege
        - Default to read-only access where possible
        - Enhance security posture

        Fixes #${{ github.event.issue.number || inputs.issue_number }}"
        
    - name: Push branch
      run: |
        if [ -n "$(git status --porcelain)" ] || [ -n "$(git diff origin/main)" ]; then
          git push origin ${{ env.BRANCH_NAME }}
          echo "CHANGES_MADE=true" >> $GITHUB_ENV
        else
          echo "CHANGES_MADE=false" >> $GITHUB_ENV
        fi
        
    - name: Create Pull Request
      if: env.CHANGES_MADE == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issueNumber = ${{ github.event.issue.number || inputs.issue_number }};
          
          const pr = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `fix: Add workflow permissions for security issue #${issueNumber}`,
            body: `## ðŸ”’ Security Fix: Workflow Permissions
            
            This PR adds explicit permissions to GitHub Actions workflows following security best practices.
            
            ### Changes Made
            - âœ… Added explicit permissions declarations
            - âœ… Default to read-only access
            - âœ… Follow principle of least privilege
            - âœ… Enhanced security posture
            
            ### Security Impact
            - Prevents privilege escalation
            - Limits potential damage from compromised actions
            - Follows GitHub security recommendations
            - Improves overall repository security
            
            Fixes #${issueNumber}
            
            ---
            *This PR was automatically generated to fix a security vulnerability.*`,
            head: '${{ env.BRANCH_NAME }}',
            base: 'main',
            draft: false
          });
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: `ðŸ¤– **Automated Fix Created**\n\nI've created PR #${pr.data.number} to fix this security issue.`
          });