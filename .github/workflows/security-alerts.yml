name: Security Alert Management

on:
  # Allow manual trigger for testing
  workflow_dispatch:
  
  # Run on schedule to check for new alerts (reduced frequency to avoid rate limits)
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC only
  
  # Run when security alerts are found
  workflow_run:
    workflows: ["CodeQL"]
    types:
      - completed

permissions:
  issues: write
  security-events: read
  contents: read

jobs:
  process-security-alerts:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Process CodeQL Alerts
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          // Function to create issue from alert
          async function createIssueFromAlert(alert) {
            // Check if issue already exists for this alert using issues API (less rate limited)
            const existingIssues = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'all',
              labels: 'codeql-alert',
              per_page: 100
            });
            
            const existingIssue = existingIssues.data.find(issue => 
              issue.title.includes(`CodeQL Alert #${alert.number}`) || 
              issue.body.includes(`CodeQL security alert #${alert.number}`)
            );
            
            if (existingIssue) {
              console.log(`Issue already exists for alert #${alert.number}: #${existingIssue.number}`);
              return;
            }
            
            // Determine severity label
            const severityLabel = alert.rule.severity === 'error' ? 'security-critical' : 
                                 alert.rule.severity === 'warning' ? 'security-high' : 'security-medium';
            
            // Create issue body
            const issueBody = `## üö® CodeQL Security Alert #${alert.number}
            
            ### Alert Details
            - **Rule**: ${alert.rule.name}
            - **Severity**: ${alert.rule.severity.toUpperCase()}
            - **Category**: ${alert.rule.tags.join(', ')}
            - **File**: \`${alert.most_recent_instance.location.path}:${alert.most_recent_instance.location.start_line}\`
            - **Status**: ${alert.state}
            
            ### Description
            ${alert.rule.description}
            
            ### Code Location
            \`\`\`${alert.most_recent_instance.location.path.split('.').pop()}
            ${alert.most_recent_instance.message.text}
            \`\`\`
            
            **File**: [${alert.most_recent_instance.location.path}](https://github.com/${owner}/${repo}/blob/${alert.most_recent_instance.commit_sha}/${alert.most_recent_instance.location.path}#L${alert.most_recent_instance.location.start_line})
            
            ### Recommendation
            ${alert.rule.help || 'Please review and fix this security issue according to best practices.'}
            
            ### Auto-Generated Fix (if applicable)
            ${alert.most_recent_instance.classifications ? '‚úÖ Auto-fix available' : '‚ùå Manual fix required'}
            
            ---
            *This issue was automatically created from CodeQL security alert #${alert.number}*
            `;
            
            // Create the issue
            const issue = await github.rest.issues.create({
              owner,
              repo,
              title: `[Security] ${alert.rule.name} in ${alert.most_recent_instance.location.path}`,
              body: issueBody,
              labels: ['security', severityLabel, 'codeql-alert'],
              assignees: ['adrianwedd'] // Assign to repo owner
            });
            
            console.log(`Created issue #${issue.data.number} for alert #${alert.number}`);
            
            // Add comment with fix suggestions if available
            if (alert.rule.help_uri) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issue.data.number,
                body: `üìö **Additional Resources**\n\nFor more information on fixing this issue, see: ${alert.rule.help_uri}`
              });
            }
          }
          
          try {
            // Get all open security alerts with pagination
            const alerts = await github.rest.codeScanning.listAlertsForRepo({
              owner,
              repo,
              state: 'open',
              per_page: 10  // Reduced to avoid rate limits
            });
            
            console.log(`Found ${alerts.data.length} open security alerts`);
            
            // Process alerts with better rate limiting
            for (let i = 0; i < alerts.data.length; i++) {
              const alert = alerts.data[i];
              await createIssueFromAlert(alert);
              
              // Progressive rate limiting: longer waits for more API calls
              const waitTime = Math.min(2000 + (i * 500), 5000);
              await new Promise(resolve => setTimeout(resolve, waitTime));
            }
            
            // Summary comment
            if (context.eventName === 'code_scanning_alert') {
              const summary = `‚úÖ Processed ${alerts.data.length} security alerts`;
              core.notice(summary);
            }
            
          } catch (error) {
            core.error(`Error processing security alerts: ${error.message}`);
            throw error;
          }

    - name: Group Similar Alerts
      if: github.event_name == 'schedule'  # Only run weekly to reduce API calls
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Skip grouping if not scheduled run to reduce API calls
          if (context.eventName !== 'schedule') {
            console.log('Skipping alert grouping - not a scheduled run');
            return;
          }
          
          // Group similar rate limiting issues with reduced API calls
          const rateLimitIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'security,codeql-alert',
            state: 'open',
            per_page: 50  // Reduced from 100
          });
          
          const rateLimitGroup = rateLimitIssues.data.filter(issue => 
            issue.title.includes('Missing rate limiting') || issue.title.includes('rate limit')
          );
          
          console.log(`Found ${rateLimitGroup.length} rate limiting issues`);
          
          if (rateLimitGroup.length > 3) {
            // Check if meta-issue already exists
            const metaIssues = rateLimitIssues.data.filter(issue => 
              issue.title.includes('Systematic Missing Rate Limiting') && issue.labels.some(label => label.name === 'meta-issue')
            );
            
            if (metaIssues.length > 0) {
              console.log('Meta-issue already exists for rate limiting alerts');
              return;
            }
            
            // Create meta-issue for grouped alerts
            const metaIssueBody = `## üîí Grouped Security Alert: Missing Rate Limiting
            
            ### Summary
            Multiple endpoints are missing rate limiting protection (${rateLimitGroup.length} total). This should be addressed systematically.
            
            ### Recommended Solution
            Implement application-wide rate limiting using \`express-rate-limit\` middleware.
            
            ### Related Issues Count
            ${rateLimitGroup.length} individual rate limiting issues found.
            `;
            
            const metaIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[Security] Systematic Missing Rate Limiting - Multiple Endpoints',
              body: metaIssueBody,
              labels: ['security', 'security-high', 'codeql-alert', 'meta-issue'],
              assignees: ['adrianwedd']
            });
            
            console.log(`Created meta-issue #${metaIssue.data.number} for grouped rate limiting alerts`);
          }

    - name: Create Security Summary
      if: github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Get security metrics with reduced API calls
          let openAlertsCount = 0;
          let closedAlertsCount = 0;
          
          try {
            const openAlerts = await github.rest.codeScanning.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 10  // Reduced to avoid rate limits
            });
            openAlertsCount = openAlerts.data.length;
            
            // Skip closed alerts count to reduce API calls
            // const closedAlerts = await github.rest.codeScanning.listAlertsForRepo({
            //   owner: context.repo.owner,
            //   repo: context.repo.repo,
            //   state: 'closed'
            // });
            
            const securityIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security',
              state: 'open',  // Only open issues to reduce load
              per_page: 50
            });
            
            await new Promise(resolve => setTimeout(resolve, 2000)); // Rate limit protection
          
            // Create summary with available data
            const summary = `## üìä Security Status Report
            
            ### CodeQL Alerts
            - **Open Alerts**: ${openAlertsCount}
            - **Open Security Issues**: ${securityIssues.data.length}
            
            ### Recent Activity
            - Last scan: ${new Date().toISOString()}
            - Auto-created issues: ${securityIssues.data.filter(i => i.body && i.body.includes('automatically created from CodeQL')).length}
            
            ---
            *This summary is generated automatically weekly to minimize API usage*
            `;
            
          } catch (error) {
            console.log(`Rate limit or API error in security summary: ${error.message}`);
            return; // Skip summary creation if rate limited
          }
          
          // Update or create security status issue
          const statusIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'security-status',
            state: 'open'
          });
          
          if (statusIssues.data.length > 0) {
            // Update existing status issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: statusIssues.data[0].number,
              body: summary
            });
          } else {
            // Create new status issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üìä Security Status Dashboard',
              body: summary,
              labels: ['security-status', 'documentation'],
              pinned: true
            });
          }