name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read

jobs:
  bash-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          sqlite3 \
          jq \
          bc \
          rsync \
          libimage-exiftool-perl \
          curl

    - name: Test script syntax
      run: |
        bash -n ordr.fm.sh
        for script in lib/*.sh; do
          if [ -f "$script" ]; then
            echo "Testing syntax: $script"
            bash -n "$script"
          fi
        done

    - name: Test configuration loading
      run: |
        # Test with default config
        ./ordr.fm.sh --help
        
        # Test config validation
        echo "Testing configuration validation..."
        if ./ordr.fm.sh --validate-config --source /tmp/nonexistent >/dev/null 2>&1; then
          echo "ERROR: Validation should have failed for nonexistent directory"
          exit 1
        else
          echo "SUCCESS: Validation correctly failed for nonexistent directory"
        fi

    - name: Test database schema
      run: |
        # Test SQLite schema creation
        sqlite3 test.db < server/database/schema.sql
        
        # Verify tables were created
        TABLES=$(sqlite3 test.db ".tables")
        echo "Created tables: $TABLES"
        
        # Check critical tables exist
        echo "$TABLES" | grep -q "albums" || exit 1
        echo "$TABLES" | grep -q "mb_artists" || exit 1
        echo "$TABLES" | grep -q "move_operations" || exit 1

    - name: Test metadata extraction
      run: |
        # Create test audio file structure
        mkdir -p /tmp/test-music/test-album
        
        # Create dummy files to test directory parsing
        touch "/tmp/test-music/test-album/01 - Test Track.mp3"
        touch "/tmp/test-music/test-album/02 - Another Track.mp3"
        
        # Test dry-run mode (should not fail on dummy files)
        ./ordr.fm.sh --source /tmp/test-music --destination /tmp/test-dest --dry-run --verbose

  node-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: |
          server/package-lock.json
          visualization/package-lock.json

    - name: Install dependencies
      run: |
        cd server
        npm ci

    - name: Create test database
      run: |
        cd server
        sqlite3 test.db < database/schema.sql

    - name: Run tests
      run: |
        cd server
        npm test
      env:
        NODE_ENV: test
        METADATA_DB: test.db
        STATE_DB: test_state.db

    - name: Test server startup
      run: |
        cd server
        timeout 10s npm start || [ $? -eq 124 ]
      env:
        NODE_ENV: test
        PORT: 3001
        METADATA_DB: test.db

  integration-tests:
    runs-on: ubuntu-latest
    needs: [bash-tests, node-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          server/package-lock.json
          visualization/package-lock.json

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          sqlite3 \
          jq \
          bc \
          rsync \
          libimage-exiftool-perl \
          curl

    - name: Install Node.js dependencies
      run: |
        cd server
        npm ci

    - name: Initialize databases
      run: |
        sqlite3 ordr.fm.metadata.db < server/database/schema.sql
        sqlite3 ordr.fm.state.db < server/database/schema.sql

    - name: Test full workflow
      run: |
        # Create test music structure
        mkdir -p /tmp/integration-test/{source,dest,unsorted}
        mkdir -p "/tmp/integration-test/source/Test Artist - Test Album (2024)"
        
        # Create test files
        echo "Test MP3 content" > "/tmp/integration-test/source/Test Artist - Test Album (2024)/01 - Test Song.mp3"
        echo "Test MP3 content" > "/tmp/integration-test/source/Test Artist - Test Album (2024)/02 - Another Song.mp3"
        
        # Run organization in dry-run mode
        ./ordr.fm.sh \
          --source /tmp/integration-test/source \
          --destination /tmp/integration-test/dest \
          --unsorted /tmp/integration-test/unsorted \
          --dry-run \
          --verbose
        
        # Start server in background
        cd server
        PORT=3001 METADATA_DB=../ordr.fm.metadata.db npm start &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 5
        
        # Test API endpoints
        curl -f http://localhost:3001/health
        curl -f http://localhost:3001/api/stats
        
        # Clean up
        kill $SERVER_PID || true

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          server/package-lock.json
          visualization/package-lock.json

    - name: Install dependencies
      run: |
        cd server
        npm ci

    - name: Lint JavaScript
      run: |
        cd server
        npm run lint || echo "No lint script found, skipping..."

    - name: Check shell scripts with shellcheck
      run: |
        if command -v shellcheck &> /dev/null; then
          find . -name "*.sh" -exec shellcheck {} \;
        else
          echo "shellcheck not available, installing..."
          sudo apt-get update && sudo apt-get install -y shellcheck
          find . -name "*.sh" -exec shellcheck {} \;
        fi