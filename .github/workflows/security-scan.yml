name: 🔐 Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code_quality
          - secrets

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-security:
    name: 🔍 Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: visualization/package-lock.json

    - name: 📦 Install Dependencies
      working-directory: ./visualization
      run: |
        npm ci --only=prod
        npm install --save-dev audit-ci retire

    - name: 🔍 NPM Security Audit
      working-directory: ./visualization
      run: |
        echo "🔍 Running npm audit..."
        npm audit --audit-level=moderate --json > npm-audit-results.json || true
        npx audit-ci --report-type=json --output-file=audit-ci-results.json || true
        
    - name: 🔍 Retire.js Vulnerability Scan
      working-directory: ./visualization
      run: |
        echo "🔍 Running Retire.js scan..."
        npx retire --path=. --outputformat=json --outputpath=retire-results.json || true

    - name: 📊 Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-security-reports
        path: |
          visualization/npm-audit-results.json
          visualization/audit-ci-results.json
          visualization/retire-results.json
        retention-days: 30

  code-security:
    name: 🔒 Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: visualization/package-lock.json

    - name: 📦 Install Dependencies
      working-directory: ./visualization
      run: npm ci

    - name: 🔍 ESLint Security Analysis
      working-directory: ./visualization
      run: |
        echo "🔍 Running ESLint security analysis..."
        npx eslint . --format=json --output-file=eslint-security-results.json || true

    - name: 🐚 ShellCheck Security Scan
      run: |
        echo "🔍 Running ShellCheck security analysis..."
        sudo apt-get update && sudo apt-get install -y shellcheck
        find . -name "*.sh" -type f | head -20 | xargs shellcheck -f json > shellcheck-results.json || true

    - name: 🔒 Secrets Detection
      run: |
        echo "🔍 Scanning for hardcoded secrets..."
        # Create a simple secrets detection script
        cat > secrets-scan.sh << 'EOF'
        #!/bin/bash
        echo "Scanning for potential secrets..."
        
        patterns=(
          "password.*=.*['\"][^'\"]*['\"]"
          "api[_-]?key.*=.*['\"][^'\"]*['\"]"
          "secret.*=.*['\"][^'\"]*['\"]"
          "token.*=.*['\"][^'\"]*['\"]"
        )
        
        for pattern in "${patterns[@]}"; do
          echo "Checking pattern: $pattern"
          if matches=$(grep -r -n -i "$pattern" visualization/src/ 2>/dev/null); then
            echo "POTENTIAL SECRET FOUND:"
            echo "$matches"
          fi
        done
        EOF
        
        chmod +x secrets-scan.sh
        ./secrets-scan.sh > secrets-scan-results.txt

    - name: 📊 Upload Code Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-security-reports
        path: |
          visualization/eslint-security-results.json
          shellcheck-results.json
          secrets-scan-results.txt
        retention-days: 30

  security-headers:
    name: 🛡️ Security Headers Analysis
    runs-on: ubuntu-latest
    needs: [dependency-security]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm' 
        cache-dependency-path: visualization/package-lock.json

    - name: 📦 Install Dependencies
      working-directory: ./visualization
      run: npm ci

    - name: 🚀 Start Application
      working-directory: ./visualization
      run: |
        npm start &
        sleep 10
        echo "Application started"

    - name: 🛡️ Test Security Headers
      run: |
        echo "🛡️ Testing security headers..."
        
        # Test basic endpoints for security headers
        endpoints=(
          "http://localhost:3847/api/health"
          "http://localhost:3847/api/albums"
          "http://localhost:3847"
        )
        
        for endpoint in "${endpoints[@]}"; do
          echo "Testing endpoint: $endpoint"
          curl -I "$endpoint" 2>/dev/null | grep -i "x-\|strict\|content-security\|referrer" || echo "No security headers found for $endpoint"
        done > security-headers-results.txt

    - name: 📊 Upload Security Headers Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-headers-reports
        path: security-headers-results.txt
        retention-days: 30

  comprehensive-scan:
    name: 🔐 Comprehensive Security Scan
    runs-on: ubuntu-latest
    needs: [dependency-security, code-security, security-headers]
    if: github.event_name == 'schedule' || github.event.inputs.scan_type == 'full'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: visualization/package-lock.json

    - name: 🐚 Install System Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck jq

    - name: 📦 Install Dependencies
      working-directory: ./visualization
      run: npm ci

    - name: 🔐 Run Comprehensive Security Scan
      working-directory: ./visualization
      run: |
        chmod +x scripts/security-scan.sh
        ./scripts/security-scan.sh || true

    - name: 📊 Upload Comprehensive Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-security-report
        path: |
          visualization/security-reports/
        retention-days: 90

  security-summary:
    name: 📋 Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-security, code-security, security-headers]
    if: always()
    
    steps:
    - name: 📥 Download Security Reports
      uses: actions/download-artifact@v4
      with:
        path: security-artifacts

    - name: 📋 Generate Security Summary
      run: |
        echo "# 🔐 Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "**Scan Date**: $(date)" >> security-summary.md
        echo "**Commit**: ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## 🔍 Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Count security issues from artifacts
        total_issues=0
        
        if [ -d "security-artifacts/dependency-security-reports" ]; then
          echo "### 📦 Dependency Security" >> security-summary.md
          dep_issues=$(find security-artifacts/dependency-security-reports -name "*.json" | wc -l)
          echo "- Reports generated: $dep_issues" >> security-summary.md
          total_issues=$((total_issues + dep_issues))
        fi
        
        if [ -d "security-artifacts/code-security-reports" ]; then
          echo "### 🔒 Code Security" >> security-summary.md
          code_issues=$(find security-artifacts/code-security-reports -name "*.json" -o -name "*.txt" | wc -l)
          echo "- Reports generated: $code_issues" >> security-summary.md
          total_issues=$((total_issues + code_issues))
        fi
        
        echo "" >> security-summary.md
        echo "## 📊 Summary" >> security-summary.md
        echo "- **Total Security Checks**: $total_issues" >> security-summary.md
        echo "- **Architecture**: Modular (15 Node.js + 16 Shell components)" >> security-summary.md
        echo "- **Scan Status**: $([ $total_issues -eq 0 ] && echo '✅ Clean' || echo '⚠️ Issues Detected')" >> security-summary.md
        
        cat security-summary.md

    - name: 📊 Upload Security Summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        retention-days: 30

  security-notification:
    name: 📧 Security Notifications
    runs-on: ubuntu-latest
    needs: [security-summary]
    if: always() && (github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security]'))
    
    steps:
    - name: 📥 Download Security Summary
      uses: actions/download-artifact@v4
      with:
        name: security-summary
        path: .

    - name: 📧 Create Security Issue (if high severity found)
      if: contains(needs.*.result, 'failure')
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🔐 Security Alert: Issues Detected in Scan ${new Date().toISOString().split('T')[0]}`,
            body: `## Automated Security Scan Alert\n\n${summary}\n\n**Action Required**: Please review the security scan results and address any high-priority issues.\n\n**Workflow**: ${context.workflow}\n**Run ID**: ${context.runId}`,
            labels: ['security', 'automated', 'high-priority']
          });

# Security scan configuration
env:
  NODE_ENV: production
  # Add any other environment variables needed for security scanning